// datasource db defines the database connection settings.
// It is configured for PostgreSQL and uses an environment variable for the connection URL.
// The 'extensions' feature enables the use of PostgreSQL-specific data types.
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

// generator db configures Prisma Client settings.
// It is set up to use Prisma Client Python with asyncio interface and specific features.
generator db {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
  previewFeatures      = ["postgresqlExtensions"]
}

model User {
  id             String           @id @default(dbgenerated("gen_random_uuid()"))
  email          String           @unique
  hashedPassword String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  role           UserRole
  preferences    UserPreferences?
  subscriptions  Subscription[]
  likes          ComicLike[]
}

model Comic {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()"))
  title                String
  imgUrl               String
  pubDate              DateTime
  explanation          String
  isNSFW               Boolean                @default(false)
  tags                 Tag[]
  likes                ComicLike[]
  AIExplanationRequest AIExplanationRequest[]
}

model Tag {
  id                String           @id @default(dbgenerated("gen_random_uuid()"))
  name              String           @unique
  comics            Comic[]
  UserPreferences   UserPreferences? @relation(fields: [userPreferencesId], references: [id])
  userPreferencesId String?
}

model ComicLike {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  userId    String
  comicId   String
  user      User     @relation(fields: [userId], references: [id])
  comic     Comic    @relation(fields: [comicId], references: [id])
  createdAt DateTime @default(now())
}

model UserPreferences {
  id            String  @id @default(dbgenerated("gen_random_uuid()"))
  userId        String  @unique
  excludeNSFW   Boolean @default(false)
  preferredTags Tag[]
  user          User    @relation(fields: [userId], references: [id])
}

model Subscription {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  active    Boolean  @default(true)
}

model AIExplanationRequest {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  comicId   String
  requestId String   @unique
  createdAt DateTime @default(now())
  response  String?
  comic     Comic    @relation(fields: [comicId], references: [id])
}

enum UserRole {
  ADMIN
  SUBSCRIBER
  GUEST
}

